package uk.ac.nottingham.ningboport.planner;

import java.util.Calendar;

public class Task implements Comparable<Task> {
	public int taskID;
	public Commodity cmdt;
	public int size; // 1: small 2: large
	public double fuel; // fuel cost of this action.
	public Calendar startT, finishT;
	public Calendar actualStartT, actualFinishT;
	
	// how long has the truck waited for new order.
	// only modifiable by event based simulator
	private int restTimeInMinute;
	
	public boolean emergent; // updated by chkroute;
	// The delay in real time; negative means early finish.
	// Note that this delay is not used in deadline checking.

	public String driver = "none";
	public String vehicleID = "none";
	
	public enum sortingMethod {AVAIL_TIME, DEADLINE, SHORTEST_DISTANCE, LONGEST_DISTANCE, ACTUAL_STARTING_TIME}; // static?
	public static sortingMethod sortBy = sortingMethod.DEADLINE;
	public Task gT; // 2 small boxes can put together
	//public boolean finished; // whether the action is already done
	public enum taskStatus {
		PLANNED(0), RUNNING(1), FINISHED(2);
		
		private int value;
		private taskStatus(int value) {
			this.value = value;
		}
		
		public int getValue() {
			return value;
		}
		
		public static taskStatus convertFromInt(int i) {
			if (i == 0) {
				return PLANNED;
			} else if (i == 0) {
				return RUNNING;
			} else {
				return FINISHED;
			}
			
		}
	};
	public taskStatus currentStatus = taskStatus.PLANNED;
	
	public boolean freezed() {
		if (currentStatus != taskStatus.PLANNED || this.actualStartT != null || actualFinishT != null)
			return true;
		
		return false;
	}

	//private int lateness;
//	public int getLateness() {
//		if (currentStatus == taskStatus.FINISHED)
//			return lateness;
//		else
//			return 0;
//	}
//	
//	public boolean setLateness(int delay) {
//		System.out.println("set delay:" + this.cmdt.id);
//		if (currentStatus != taskStatus.FINISHED)
//			return false;
//			
//		lateness = delay;
//		return true;
//	}
/*	public boolean grab(Vector<TransportAction> ta, int index) {
		if (index >= ta.size() || index < 0) {
			RoutingPlanner.errormsg("Grab: bad index");
			System.exit(0);
		}
		this.gT = ta.elementAt(index);
		ta.remove(index);
		return true;
	}
	
	public boolean grab(Vector<TransportAction> ta, TransportAction t) {
		if (!ta.contains(t)) {
			RoutingPlanner.errormsg("Grab: no such ta");
			System.exit(0);
		}
		this.gT = t;
		ta.remove(t);
		return true;
	}*/

	public int compareTo(Task that) {
		if (sortBy == sortingMethod.DEADLINE) {
			if (this.cmdt.deadline.before(that.cmdt.deadline))
				return -1;
			else if (this.cmdt.deadline.after(that.cmdt.deadline))
				return 1;
			else
				return 0;
			
		} else if (sortBy == sortingMethod.AVAIL_TIME) {
			if (this.cmdt.availTime.before(that.cmdt.availTime))
				return -1;
			else if (this.cmdt.availTime.after(that.cmdt.availTime))
				return 1;
			else
				return 0;
			
		} else if (sortBy == sortingMethod.ACTUAL_STARTING_TIME) {
			return this.actualStartT.compareTo(that.actualStartT);
		}
		return 0;
	} 
	
	public String toString() {
		String res = cmdt.id + 
				": " + cmdt.src.id +
				"->" + cmdt.dest.id + " (" +
				cmdt.availTime.getTime() + " - " + cmdt.deadline.getTime() +
				") weight:" + size;
		if (this.gT != null) {
			res += " with " + gT.cmdt.id + " " + gT.size;
		}
		return res;
	}
	
	public String toDisplayString() {
		String res = cmdt.id + 
				": \n" + cmdt.src.id +
				"->" + cmdt.dest.id + " \n(" +
				cmdt.availTime.getTime() + " - " + cmdt.deadline.getTime() +
				") \nweight:" + size;
		if (this.gT != null) {
			res += " with " + gT.cmdt.id + " " + gT.size;
		}
		return res;
	}
	
	public String toDisplayString1() {
		String res = cmdt.id + 
				": " ;
		return res;
	}
	
	public String toDisplayString2() {
		String res = cmdt.src.id +
				"->" + cmdt.dest.id;
		return res;
	}
	
	public String toDisplayString3() {
		String res = " (" +
				cmdt.availTime.getTime() + " - " + cmdt.deadline.getTime() +
				")";
		return res;
	}
	
	public String toDisplayString4() {
		String res = "weight:" + size;
		return res;
	}
	
	public String toDisplayString5() {
		String res = "";
		if (this.gT != null) {
			res += " with " + gT.cmdt.id + " " + gT.size;
		}
		return res;
	}
	
	// things changes need to be cloned. other things such as cmdt don't.
	public Task clone() {
		Task t = new Task();
		t.cmdt = this.cmdt;
		t.size = this.size;
		t.fuel = this.fuel;
		if (t.startT != null) {
			t.startT = (Calendar) this.startT.clone();
		}
		
		if (t.finishT != null) {
			t.finishT = (Calendar) this.finishT.clone();
		}
		
		t.restTimeInMinute = this.restTimeInMinute;
		t.emergent = this.emergent;
		//t.lateness = this.lateness;
		t.driver = this.driver;
		t.vehicleID = this.vehicleID;
		
		if (this.gT != null) {
			t.gT = this.gT.clone();
		}
		t.currentStatus = this.currentStatus;
		
		return t;
	}

	public int getRestTimeInMinute() {
		if (actualFinishT != null) {
			return restTimeInMinute;
		} else {
			return 0;
		}
		
	}

	public void setRestTimeInMinute(int restTimeInMinute) {
		if (actualFinishT != null) {
			this.restTimeInMinute = restTimeInMinute;
		} else {
			System.out.println("Error setting restTime, not a completed task");
		}
		
	}
}
